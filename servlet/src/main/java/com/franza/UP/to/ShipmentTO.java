package com.franza.UP.to;

import javax.servlet.http.HttpServletRequest;

import com.franza.UP.model.Shipment;
import com.franza.UP.model.Entity;
import com.franza.UP.to.TO;
import com.franza.UP.util.InvalidInputException;

/**
 * <p> Instantiable class that implements the correspondent TO interface and contains: </p>
 * 	 <ul><li> the fields correspondent to the shipment entity bean, </li> 
 * 	 	 <li> the builder functions needed to fill the fields of the transfer object, </li>
 *       <li> the utility functions needed to adjust the queries, </li>
 *       <li> the checker functions needed to check potential errors in the data. </li></ul>
 */
public class ShipmentTO implements TO {

	/**
	 * <p> Private field to store the shipmentCode of the shipment. </p>  
	 */
	private String shipmentCode = "";

	/**
	 * <p> Private field to store the destination of the shipment. </p>  
	 */
	private String destination = "";

	/**
	 * <p> Private field to store the withdrawalDate of the shipment. </p>  
	 */
	private String withdrawalDate = "";

	/**
	 * <p> Private field to store the deliveryDate of the shipment. </p>  
	 */
	private String deliveryDate = "";

	/**
	 * <p> Private field to store the earnings of the shipment. </p>  
	 */
	private Integer earnings = -1;

	// builders

	/**
	 * <p> Public method that initializes the shipment transfer object fields with the values taken from the http request. </p>
	 * @param req : http request that stores the values to be copied into the shipment transfer object.
	 * @return the updated shipment transfer object.
	 */
	public TO getFromRequest (HttpServletRequest req) {
		if (req.getParameter("shipmentCodeShipment") != null)
			if (! req.getParameter("shipmentCodeShipment").equals(""))
				setShipmentCode (req.getParameter("shipmentCodeShipment"));
		if (req.getParameter("destinationShipment") != null)
			if (! req.getParameter("destinationShipment").equals(""))
				setDestination (req.getParameter("destinationShipment"));
		if (req.getParameter("withdrawalDateShipment") != null)
			if (! req.getParameter("withdrawalDateShipment").equals(""))
				setWithdrawalDate (req.getParameter("withdrawalDateShipment"));
		if (req.getParameter("deliveryDateShipment") != null)
			if (! req.getParameter("deliveryDateShipment").equals(""))
				setDeliveryDate (req.getParameter("deliveryDateShipment"));
		if (req.getParameter("earningsShipment") != null)
			if (! req.getParameter("earningsShipment").equals(""))
				setEarnings (Integer.parseInt(req.getParameter("earningsShipment")));
		return this;
	}

	/**
	 * <p> Public method that initializes the shipment fields with the values given in input. </p>
	 * @param shipmentCode : string that stores the shipmentCode to be copied into the shipment entity bean.
	 * @param destination : string that stores the destination to be copied into the shipment entity bean.
	 * @param withdrawalDate : string that stores the withdrawalDate to be copied into the shipment entity bean.
	 * @param deliveryDate : string that stores the deliveryDate to be copied into the shipment entity bean.
	 * @param earnings : integer that stores the earnings to be copied into the shipment entity bean.
	 * @return the updated shipment entity bean.
	 */
	public ShipmentTO getFromData(String shipmentCode, String destination, String withdrawalDate, String deliveryDate, Integer earnings) {
		return setShipmentCode(shipmentCode)
				.setDestination(destination)
				.setWithdrawalDate(withdrawalDate)
				.setDeliveryDate(deliveryDate)
				.setEarnings(earnings);
	}

	/**
	 * <p> Public method that initializes the shipment transfer object fields with the values taken from the correspondent shipment entity bean. </p>
	 * @param entity : entity bean that stores the values to be copied into the shipment transfer object.
	 * @return the updated shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the fields of the transfer object are not valid. It is generated by the checker functions of this same class.
	 */
	public TO getFromEntity(Entity entity) throws InvalidInputException {
		return getFromData(((Shipment) entity).getShipmentCode(), 
						   ((Shipment) entity).getDestination(), 
						   ((Shipment) entity).getWithdrawalDate(), 
						   ((Shipment) entity).getDeliveryDate(), 
						   ((Shipment) entity).getEarnings() );
	}

	// getters & setters

	/**
	 * <p> Getter method for the instantiated transfer object to get the shipmentCode of the shipment. </p>
	 * @return the shipmentCode of the shipment.
	 */
	public String getShipmentCode() { 
		return shipmentCode; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the shipmentCode of the shipment. </p>
	 * @param shipmentCode : shipmentCode of the shipment.
	 * @return the shipment with the updated shipmentCode.
	 */
	public ShipmentTO setShipmentCode(String shipmentCode) { 
		this.shipmentCode = shipmentCode; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the destination of the shipment. </p>
	 * @return the destination of the shipment.
	 */
	public String getDestination() { 
		return destination; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the destination of the shipment. </p>
	 * @param destination : destination of the shipment.
	 * @return the shipment with the updated destination.
	 */
	public ShipmentTO setDestination(String destination) { 
		this.destination = destination; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the withdrawalDate of the shipment. </p>
	 * @return the withdrawalDate of the shipment.
	 */
	public String getWithdrawalDate() { 
		return withdrawalDate; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the withdrawalDate of the shipment. </p>
	 * @param withdrawalDate : withdrawalDate of the shipment.
	 * @return the shipment with the updated withdrawalDate.
	 */
	public ShipmentTO setWithdrawalDate(String withdrawalDate) { 
		this.withdrawalDate = withdrawalDate; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the deliveryDate of the shipment. </p>
	 * @return the deliveryDate of the shipment.
	 */
	public String getDeliveryDate() { 
		return deliveryDate; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the deliveryDate of the shipment. </p>
	 * @param deliveryDate : deliveryDate of the shipment.
	 * @return the shipment with the updated deliveryDate.
	 */
	public ShipmentTO setDeliveryDate(String deliveryDate) { 
		this.deliveryDate = deliveryDate; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the earnings of the shipment. </p>
	 * @return the earnings of the shipment.
	 */
	public Integer getEarnings() { 
		return earnings; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the earnings of the shipment. </p>
	 * @param earnings : earnings of the shipment.
	 * @return the shipment with the updated earnings.
	 */
	public ShipmentTO setEarnings(Integer earnings) { 
		this.earnings = earnings; 
		return this;
	}

	// checkers 

	/**
	 * <p> Public method that checks the shipmentCode of the shipment for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the shipmentCode of the shipment is not valid.
	 */
	public ShipmentTO checkShipmentCode() throws InvalidInputException {
		if (shipmentCode.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the destination of the shipment for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the destination of the shipment is not valid.
	 */
	public ShipmentTO checkDestination() throws InvalidInputException {
		if (destination.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the withdrawalDate of the shipment for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the withdrawalDate of the shipment is not valid.
	 */
	public ShipmentTO checkWithdrawalDate() throws InvalidInputException {
		if (withdrawalDate.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the deliveryDate of the shipment for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the deliveryDate of the shipment is not valid.
	 */
	public ShipmentTO checkDeliveryDate() throws InvalidInputException {
		if (deliveryDate.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the earnings of the shipment for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the earnings of the shipment is not valid.
	 */
	public ShipmentTO checkEarnings() throws InvalidInputException {
		if (earnings.equals(-1)) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the values of the shipment primary keys for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object primary keys are not valid.
	 */
	public TO checkPrimaryKeys() throws InvalidInputException {
		return this.checkShipmentCode();
	}

	/**
	 * <p> Public method that checks the values of the shipment foreign keys for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object foreign keys are not valid.
	 */
	public TO checkForeignKeys() throws InvalidInputException {
		return this;
	}

	/**
	 * <p> Public method that checks the values of the shipment primary and foreign keys for eventual errors. </p>
	 * @return the checked shipment transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object primary and foreign keys are not valid.
	 */
	public TO checkKeys() throws InvalidInputException {
		return this.checkPrimaryKeys().checkForeignKeys();
	}

	// utilities

	/**
	 * <p> Public method that adapts the shipment transfer object to the search query. </p>
	 * @param flag : necessary to choose if the search method has to consider strings or substrings.
	 * @return the updated shipment transfer object.
	 */
	public TO searchAdjust () {
		return this.setShipmentCode(shipmentCode.isEmpty()? shipmentCode: "%".concat(shipmentCode).concat("%"))
			   	   .setDestination(destination.isEmpty()? destination: "%".concat(destination).concat("%"))
			   	   .setWithdrawalDate(withdrawalDate.isEmpty()? withdrawalDate: "%".concat(withdrawalDate).concat("%"))
			   	   .setDeliveryDate(deliveryDate.isEmpty()? deliveryDate: "%".concat(deliveryDate).concat("%"));
	}

	@Override
	public String toString() {
		return "ShipmentTO [shipmentCode=" + shipmentCode + 
						  ", destination=" + destination + 
						  ", withdrawalDate=" + withdrawalDate + 
						  ", deliveryDate=" + deliveryDate + 
						  ", earnings=" + earnings + "]";
	}

}
