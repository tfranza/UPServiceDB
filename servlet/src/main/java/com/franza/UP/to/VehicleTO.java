package com.franza.UP.to;

import javax.servlet.http.HttpServletRequest;

import com.franza.UP.model.Vehicle;
import com.franza.UP.model.Entity;
import com.franza.UP.to.TO;
import com.franza.UP.util.InvalidInputException;

/**
 * <p> Instantiable class that implements the correspondent TO interface and contains: </p>
 * 	 <ul><li> the fields correspondent to the vehicle entity bean, </li> 
 * 	 	 <li> the builder functions needed to fill the fields of the transfer object, </li>
 *       <li> the utility functions needed to adjust the queries, </li>
 *       <li> the checker functions needed to check potential errors in the data. </li></ul>
 */
public class VehicleTO implements TO {

	/**
	 * <p> Private field to store the driver of the vehicle. </p>  
	 */
	private String driver = "";

	/**
	 * <p> Private field to store the plate of the vehicle. </p>  
	 */
	private String plate = "";

	/**
	 * <p> Private field to store the kind of the vehicle. </p>  
	 */
	private String kind = "";

	/**
	 * <p> Private field to store the costs of the vehicle. </p>  
	 */
	private Integer costs = -1;

	// builders

	/**
	 * <p> Public method that initializes the vehicle transfer object fields with the values taken from the http request. </p>
	 * @param req : http request that stores the values to be copied into the vehicle transfer object.
	 * @return the updated vehicle transfer object.
	 */
	public TO getFromRequest (HttpServletRequest req) {
		if (req.getParameter("driverVehicle") != null)
			if (! req.getParameter("driverVehicle").equals(""))
				setDriver (req.getParameter("driverVehicle"));
		if (req.getParameter("plateVehicle") != null)
			if (! req.getParameter("plateVehicle").equals(""))
				setPlate (req.getParameter("plateVehicle"));
		if (req.getParameter("kindVehicle") != null)
			if (! req.getParameter("kindVehicle").equals(""))
				setKind (req.getParameter("kindVehicle"));
		if (req.getParameter("costsVehicle") != null)
			if (! req.getParameter("costsVehicle").equals(""))
				setCosts (Integer.parseInt(req.getParameter("costsVehicle")));
		return this;
	}

	/**
	 * <p> Public method that initializes the vehicle fields with the values given in input. </p>
	 * @param driver : string that stores the driver to be copied into the vehicle entity bean.
	 * @param plate : string that stores the plate to be copied into the vehicle entity bean.
	 * @param kind : string that stores the kind to be copied into the vehicle entity bean.
	 * @param costs : integer that stores the costs to be copied into the vehicle entity bean.
	 * @return the updated vehicle entity bean.
	 */
	public VehicleTO getFromData(String driver, String plate, String kind, Integer costs) {
		return setDriver(driver)
				.setPlate(plate)
				.setKind(kind)
				.setCosts(costs);
	}

	/**
	 * <p> Public method that initializes the vehicle transfer object fields with the values taken from the correspondent vehicle entity bean. </p>
	 * @param entity : entity bean that stores the values to be copied into the vehicle transfer object.
	 * @return the updated vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the fields of the transfer object are not valid. It is generated by the checker functions of this same class.
	 */
	public TO getFromEntity(Entity entity) throws InvalidInputException {
		return getFromData(((Vehicle) entity).getDriver(), 
						   ((Vehicle) entity).getPlate(), 
						   ((Vehicle) entity).getKind(), 
						   ((Vehicle) entity).getCosts() );
	}

	// getters & setters

	/**
	 * <p> Getter method for the instantiated transfer object to get the driver of the vehicle. </p>
	 * @return the driver of the vehicle.
	 */
	public String getDriver() { 
		return driver; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the driver of the vehicle. </p>
	 * @param driver : driver of the vehicle.
	 * @return the vehicle with the updated driver.
	 */
	public VehicleTO setDriver(String driver) { 
		this.driver = driver; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the plate of the vehicle. </p>
	 * @return the plate of the vehicle.
	 */
	public String getPlate() { 
		return plate; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the plate of the vehicle. </p>
	 * @param plate : plate of the vehicle.
	 * @return the vehicle with the updated plate.
	 */
	public VehicleTO setPlate(String plate) { 
		this.plate = plate; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the kind of the vehicle. </p>
	 * @return the kind of the vehicle.
	 */
	public String getKind() { 
		return kind; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the kind of the vehicle. </p>
	 * @param kind : kind of the vehicle.
	 * @return the vehicle with the updated kind.
	 */
	public VehicleTO setKind(String kind) { 
		this.kind = kind; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the costs of the vehicle. </p>
	 * @return the costs of the vehicle.
	 */
	public Integer getCosts() { 
		return costs; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the costs of the vehicle. </p>
	 * @param costs : costs of the vehicle.
	 * @return the vehicle with the updated costs.
	 */
	public VehicleTO setCosts(Integer costs) { 
		this.costs = costs; 
		return this;
	}

	// checkers 

	/**
	 * <p> Public method that checks the driver of the vehicle for eventual errors. </p>
	 * @return the checked vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the driver of the vehicle is not valid.
	 */
	public VehicleTO checkDriver() throws InvalidInputException {
		if (driver.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the plate of the vehicle for eventual errors. </p>
	 * @return the checked vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the plate of the vehicle is not valid.
	 */
	public VehicleTO checkPlate() throws InvalidInputException {
		if (plate.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the kind of the vehicle for eventual errors. </p>
	 * @return the checked vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the kind of the vehicle is not valid.
	 */
	public VehicleTO checkKind() throws InvalidInputException {
		if (kind.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the costs of the vehicle for eventual errors. </p>
	 * @return the checked vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the costs of the vehicle is not valid.
	 */
	public VehicleTO checkCosts() throws InvalidInputException {
		if (costs.equals(-1)) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the values of the vehicle primary keys for eventual errors. </p>
	 * @return the checked vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object primary keys are not valid.
	 */
	public TO checkPrimaryKeys() throws InvalidInputException {
		return this.checkPlate();
	}

	/**
	 * <p> Public method that checks the values of the vehicle foreign keys for eventual errors. </p>
	 * @return the checked vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object foreign keys are not valid.
	 */
	public TO checkForeignKeys() throws InvalidInputException {
		return this;
	}

	/**
	 * <p> Public method that checks the values of the vehicle primary and foreign keys for eventual errors. </p>
	 * @return the checked vehicle transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object primary and foreign keys are not valid.
	 */
	public TO checkKeys() throws InvalidInputException {
		return this.checkPrimaryKeys().checkForeignKeys();
	}

	// utilities

	/**
	 * <p> Public method that adapts the vehicle transfer object to the search query. </p>
	 * @param flag : necessary to choose if the search method has to consider strings or substrings.
	 * @return the updated vehicle transfer object.
	 */
	public TO searchAdjust () {
		return this.setDriver(driver.isEmpty()? driver: "%".concat(driver).concat("%"))
			   	   .setPlate(plate.isEmpty()? plate: "%".concat(plate).concat("%"))
			   	   .setKind(kind.isEmpty()? kind: "%".concat(kind).concat("%"));
	}

	@Override
	public String toString() {
		return "VehicleTO [driver=" + driver + 
						  ", plate=" + plate + 
						  ", kind=" + kind + 
						  ", costs=" + costs + "]";
	}

}
