package com.franza.UP.to;

import javax.servlet.http.HttpServletRequest;

import com.franza.UP.model.Centre;
import com.franza.UP.model.Entity;
import com.franza.UP.to.TO;
import com.franza.UP.util.InvalidInputException;

/**
 * <p> Instantiable class that implements the correspondent TO interface and contains: </p>
 * 	 <ul><li> the fields correspondent to the centre entity bean, </li> 
 * 	 	 <li> the builder functions needed to fill the fields of the transfer object, </li>
 *       <li> the utility functions needed to adjust the queries, </li>
 *       <li> the checker functions needed to check potential errors in the data. </li></ul>
 */
public class CentreTO implements TO {

	/**
	 * <p> Private field to store the id of the centre. </p>  
	 */
	private Integer id = -1;

	/**
	 * <p> Private field to store the kind of the centre. </p>  
	 */
	private String kind = "";

	/**
	 * <p> Private field to store the address of the centre. </p>  
	 */
	private String address = "";

	// builders

	/**
	 * <p> Public method that initializes the centre transfer object fields with the values taken from the http request. </p>
	 * @param req : http request that stores the values to be copied into the centre transfer object.
	 * @return the updated centre transfer object.
	 */
	public TO getFromRequest (HttpServletRequest req) {
		if (req.getParameter("idCentre") != null)
			if (! req.getParameter("idCentre").equals(""))
				setId (Integer.parseInt(req.getParameter("idCentre")));
		if (req.getParameter("kindCentre") != null)
			if (! req.getParameter("kindCentre").equals(""))
				setKind (req.getParameter("kindCentre"));
		if (req.getParameter("addressCentre") != null)
			if (! req.getParameter("addressCentre").equals(""))
				setAddress (req.getParameter("addressCentre"));
		return this;
	}

	/**
	 * <p> Public method that initializes the centre fields with the values given in input. </p>
	 * @param id : integer that stores the id to be copied into the centre entity bean.
	 * @param kind : string that stores the kind to be copied into the centre entity bean.
	 * @param address : string that stores the address to be copied into the centre entity bean.
	 * @return the updated centre entity bean.
	 */
	public CentreTO getFromData(Integer id, String kind, String address) {
		return setId(id)
				.setKind(kind)
				.setAddress(address);
	}

	/**
	 * <p> Public method that initializes the centre transfer object fields with the values taken from the correspondent centre entity bean. </p>
	 * @param entity : entity bean that stores the values to be copied into the centre transfer object.
	 * @return the updated centre transfer object.
	 * @throws InvalidInputException Exception thrown when the fields of the transfer object are not valid. It is generated by the checker functions of this same class.
	 */
	public TO getFromEntity(Entity entity) throws InvalidInputException {
		return getFromData(((Centre) entity).getId(), 
						   ((Centre) entity).getKind(), 
						   ((Centre) entity).getAddress() );
	}

	// getters & setters

	/**
	 * <p> Getter method for the instantiated transfer object to get the id of the centre. </p>
	 * @return the id of the centre.
	 */
	public Integer getId() { 
		return id; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the id of the centre. </p>
	 * @param id : id of the centre.
	 * @return the centre with the updated id.
	 */
	public CentreTO setId(Integer id) { 
		this.id = id; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the kind of the centre. </p>
	 * @return the kind of the centre.
	 */
	public String getKind() { 
		return kind; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the kind of the centre. </p>
	 * @param kind : kind of the centre.
	 * @return the centre with the updated kind.
	 */
	public CentreTO setKind(String kind) { 
		this.kind = kind; 
		return this;
	}

	/**
	 * <p> Getter method for the instantiated transfer object to get the address of the centre. </p>
	 * @return the address of the centre.
	 */
	public String getAddress() { 
		return address; 
	}
	
	/**
	 * <p> Setter method for the instantiated transfer object to set the address of the centre. </p>
	 * @param address : address of the centre.
	 * @return the centre with the updated address.
	 */
	public CentreTO setAddress(String address) { 
		this.address = address; 
		return this;
	}

	// checkers 

	/**
	 * <p> Public method that checks the id of the centre for eventual errors. </p>
	 * @return the checked centre transfer object.
	 * @throws InvalidInputException Exception thrown when the id of the centre is not valid.
	 */
	public CentreTO checkId() throws InvalidInputException {
		if (id.equals(-1)) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the kind of the centre for eventual errors. </p>
	 * @return the checked centre transfer object.
	 * @throws InvalidInputException Exception thrown when the kind of the centre is not valid.
	 */
	public CentreTO checkKind() throws InvalidInputException {
		if (kind.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the address of the centre for eventual errors. </p>
	 * @return the checked centre transfer object.
	 * @throws InvalidInputException Exception thrown when the address of the centre is not valid.
	 */
	public CentreTO checkAddress() throws InvalidInputException {
		if (address.isEmpty()) throw new InvalidInputException(); 
		return this;
	}

	/**
	 * <p> Public method that checks the values of the centre primary keys for eventual errors. </p>
	 * @return the checked centre transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object primary keys are not valid.
	 */
	public TO checkPrimaryKeys() throws InvalidInputException {
		return this.checkId();
	}

	/**
	 * <p> Public method that checks the values of the centre foreign keys for eventual errors. </p>
	 * @return the checked centre transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object foreign keys are not valid.
	 */
	public TO checkForeignKeys() throws InvalidInputException {
		return this;
	}

	/**
	 * <p> Public method that checks the values of the centre primary and foreign keys for eventual errors. </p>
	 * @return the checked centre transfer object.
	 * @throws InvalidInputException Exception thrown when the transfer object primary and foreign keys are not valid.
	 */
	public TO checkKeys() throws InvalidInputException {
		return this.checkPrimaryKeys().checkForeignKeys();
	}

	// utilities

	/**
	 * <p> Public method that adapts the centre transfer object to the search query. </p>
	 * @param flag : necessary to choose if the search method has to consider strings or substrings.
	 * @return the updated centre transfer object.
	 */
	public TO searchAdjust () {
		return this.setKind(kind.isEmpty()? kind: "%".concat(kind).concat("%"))
			   	   .setAddress(address.isEmpty()? address: "%".concat(address).concat("%"));
	}

	@Override
	public String toString() {
		return "CentreTO [id=" + id + 
						  ", kind=" + kind + 
						  ", address=" + address + "]";
	}

}
