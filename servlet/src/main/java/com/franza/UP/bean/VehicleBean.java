package com.franza.UP.bean;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;

import com.franza.UP.dao.VehicleDAO;
import com.franza.UP.model.Vehicle;
import com.franza.UP.model.Entity;
import com.franza.UP.to.VehicleTO;
import com.franza.UP.to.TO;
import com.franza.UP.util.InvalidInputException;

/**
 * <p> Instantiable class that implements: </p>
 * 	 <ul><li>the generic CRUD operations whose signature is available in the java bean class, </li> 
 *       <li>the custom operations whose signature is available in the java bean local. </li></ul>
 * <p> The instances belonging to this class are instantiated by injection and are needed to accomplish business operations. </p>
 */
@Stateless
public class VehicleBean implements JavaBean, VehicleBeanLocal {

	/**
	 * <p> Public method that delegates the data access object to generate a new vehicle in the database using an entity bean. </p>
	 * @param to : transfer object needed to encapsulate and transfer vehicle data from the application controller to the entity bean.
	 * @return the list of the vehicles for the executed operation of creation: has to contain the inserted vehicle.
	 * @throws InvalidInputException Exception thrown when one or more inputs given by the user are not valid. It is generated by the read function of this same class.
	 */
	public List<TO> create (TO to) throws InvalidInputException {
		new VehicleDAO().create(new Vehicle().getFromTO(to));
		List<TO> list = read(to);
		if (list.size() == 0)
			throw new InvalidInputException();
		return list;
	};

	/**
	 * <p> Public method that delegates the data access object to read a list of vehicles in the database using an entity bean as a search key. </p>
	 * @param to : transfer object needed to encapsulate and transfer vehicle data from the application controller to the entity bean.
	 * @return the list of the vehicles for the executed operation of reading: has to contain all the vehicles that satisfy the search key.
	 * @throws InvalidInputException Exception thrown when one or more inputs given by the user are not valid. It is generated by the operation that moves the vehicle data from the transfer object to the entity bean.
	 */
	public List<TO> read (TO to) throws InvalidInputException {
		List<TO> toList = new ArrayList<>();
		for (Entity e: new VehicleDAO().read (new Vehicle().getFromTO(to)) )
			toList.add(new VehicleTO().getFromEntity(e));
		return toList;
	}

	/**
	 * <p> Public method that delegates the data access object to update a vehicle already present in the database using an entity bean. </p>
	 * @param to : transfer object needed to encapsulate and transfer vehicle data from the application controller to the entity bean.
	 * @return the list of the vehicles for the executed operation of update: has to contain the updated vehicle.
	 * @throws InvalidInputException Exception thrown when one or more inputs given by the user are not valid. It is generated by the read function of this same class.
	 */
	public List<TO> update (TO to) throws InvalidInputException {
		new VehicleDAO().update(new Vehicle().getFromTO(to));
		List<TO> list = read(to);
		if (list.size() == 0)
			throw new InvalidInputException();
		return list;
	}

	/**
	 * <p> Public method that delegates the data access object to delete a vehicle present in the database using an entity bean. </p>
	 * @param to : transfer object needed to encapsulate and transfer vehicle data from the application controller to the entity bean.
	 * @return the list of the vehicles for the executed operation of deletion: has to contain no vehicles.
	 * @throws InvalidInputException Exception thrown when one or more inputs given by the user are not valid. It is generated by the read function of this same class.
	 */
	public List<TO> delete (TO to) throws InvalidInputException {
		new VehicleDAO().delete(new Vehicle().getFromTO(to));
		List<TO> list = read(to);
		if (list.size() > 0)
			throw new InvalidInputException();
		return list;
	}
}